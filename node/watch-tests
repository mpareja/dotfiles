#!/bin/bash

main() {
  npm_script=$(cat_package_json | jq -r '.scripts // [] | keys[]' | egrep '(watch.*test)')

  if [ ! -z "$npm_script" ]; then
    exec npm run $npm_script -- "$@"
  else
    framework=$(detect_framework)
    echo "Detected Framework: '$framework'"
    run_tests "$(detect_framework)" "$@"
  fi
}

detect_framework() {
  list_package_jsons | while read pkg; do
    framework=$(get_framework_from_json "$pkg")
    if [ "$framework" != "" ]; then
      echo "$framework"
      return
    fi
  done
}

get_framework_from_json() {
  cat "$1" | jq -r '.devDependencies // [] | keys[]' | egrep '^(mocha|jest)$'
}

cat_package_json() {
  pkg=$(list_package_jsons | head -1)
  cat "$pkg"
}

list_package_jsons() {
  current_dir=$(pwd)

  # Traverse up the directory tree
  while [ "$current_dir" != "/" ]; do
    if [ -f "$current_dir/package.json" ]; then
      echo "$current_dir/package.json"
    fi

    # Move up one directory
    current_dir=$(dirname "$current_dir")
  done
}

run_tests() {
  framework=$1
  shift

  case "$framework" in
    jest)
      # not perfect but faster than `npm ls node-notifier`
      if [ ! -d "$(npm prefix)/node_modules/node-notifier" ]; then
        echo node-notifier not found, installing temporarily
        npm i --no-save node-notifier
      fi
      exec npx jest --no-coverage --watch --notify --notifyMode always -- "$@"
      ;;
    mocha)
      exec uwatch npx mocha "$@"
      ;;
    *)
      echo ERROR: unknown testing framework used
      exit 1
      ;;
  esac
}

main "$@"
